#!/usr/bin/env python3
"""
Unit tests for HES-Kaifa Kafka Consumer
Tests SOAP to JSON transformation and file storage functionality.
"""

import json
import os
import tempfile
import unittest
from unittest.mock import Mock, patch, MagicMock
from datetime import datetime
import xmltodict

# Import the consumer class
from hes_kaifa_consumer import HESKaifaConsumer


class TestHESKaifaConsumer(unittest.TestCase):
    """Test cases for HESKaifaConsumer class."""
    
    def setUp(self):
        """Set up test fixtures."""
        self.temp_dir = tempfile.mkdtemp()
        self.consumer = HESKaifaConsumer(
            bootstrap_servers='localhost:9092',
            topic='test-topic',
            output_dir=self.temp_dir,
            group_id='test-group'
        )
        
        # Sample SOAP XML for testing
        self.sample_soap_xml = '''<?xml version="1.0" encoding="UTF-8"?>
<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/" 
               xmlns:ns1="http://iec.ch/TC57/2011/schema/message"
               xmlns:ns2="http://iec.ch/TC57/2011/EndDeviceEvents#">
    <soap:Header/>
    <soap:Body>
        <ns1:EventMessage>
            <ns1:Header>
                <ns1:Verb>Create</ns1:Verb>
                <ns1:Noun>EndDeviceEvents</ns1:Noun>
                <ns1:Revision>1.0</ns1:Revision>
                <ns1:Timestamp>2025-09-22T07:23:59.045Z</ns1:Timestamp>
                <ns1:Source>OMS-Traffic-Simulator</ns1:Source>
                <ns1:AsyncReplyFlag>false</ns1:AsyncReplyFlag>
                <ns1:AckRequired>false</ns1:AckRequired>
                <ns1:User>
                    <ns1:UserID>simulator_user</ns1:UserID>
                    <ns1:Organization>Amman-OMS</ns1:Organization>
                </ns1:User>
                <ns1:MessageID>msg_1758525839045_235</ns1:MessageID>
                <ns1:CorrelationID>corr_1758525839045_118</ns1:CorrelationID>
                <ns1:Comment>Generated by OMS Traffic Simulator for Ain Ghazal</ns1:Comment>
            </ns1:Header>
            <ns1:Payload>
                <ns2:EndDeviceEvents>
                    <ns2:EndDeviceEvent>
                        <ns2:mRID>msg_1758525839045_236</ns2:mRID>
                        <ns2:createdDateTime>2025-09-22T07:23:59.045Z</ns2:createdDateTime>
                        <ns2:issuerID>OMS-Simulator</ns2:issuerID>
                        <ns2:issuerTrackingID>msg_1758525839045_235</ns2:issuerTrackingID>
                        <ns2:reason>Protection Trip</ns2:reason>
                        <ns2:severity>Low</ns2:severity>
                        <ns2:userID>simulator_user</ns2:userID>
                        <ns2:Assets>
                            <ns2:mRID>asset_1758525839045</ns2:mRID>
                            <ns2:Names>
                                <ns2:name>Power Asset</ns2:name>
                                <ns2:NameType>
                                    <ns2:name>Asset Name</ns2:name>
                                    <ns2:description>Power system asset identifier</ns2:description>
                                </ns2:NameType>
                            </ns2:Names>
                        </ns2:Assets>
                        <ns2:EndDeviceEventDetails>
                            <ns2:name>Current</ns2:name>
                            <ns2:value>101.65A</ns2:value>
                        </ns2:EndDeviceEventDetails>
                        <ns2:EndDeviceEventDetails>
                            <ns2:name>Frequency</ns2:name>
                            <ns2:value>49.97Hz</ns2:value>
                        </ns2:EndDeviceEventDetails>
                        <ns2:EndDeviceEventDetails>
                            <ns2:name>Power</ns2:name>
                            <ns2:value>1227.18kW</ns2:value>
                        </ns2:EndDeviceEventDetails>
                        <ns2:EndDeviceEventType ref="PowerOutage"/>
                        <ns2:Names>
                            <ns2:name>Power Event</ns2:name>
                            <ns2:NameType>
                                <ns2:name>Event Name</ns2:name>
                                <ns2:description>Power system event identifier</ns2:description>
                            </ns2:NameType>
                        </ns2:Names>
                        <ns2:status>
                            <ns2:dateTime>2025-09-22T07:23:59.045Z</ns2:dateTime>
                            <ns2:reason>Protection Trip</ns2:reason>
                            <ns2:remark>Simulated event for testing purposes</ns2:remark>
                            <ns2:value>Active</ns2:value>
                        </ns2:status>
                        <ns2:UsagePoint>
                            <ns2:mRID>up_1758525839045</ns2:mRID>
                            <ns2:Names>
                                <ns2:name>Ain Ghazal</ns2:name>
                                <ns2:NameType>
                                    <ns2:name>Usage Point Name</ns2:name>
                                    <ns2:description>Power consumption point identifier</ns2:description>
                                </ns2:NameType>
                            </ns2:Names>
                        </ns2:UsagePoint>
                    </ns2:EndDeviceEvent>
                </ns2:EndDeviceEvents>
            </ns1:Payload>
        </ns1:EventMessage>
    </soap:Body>
</soap:Envelope>'''
        
        # Sample Kafka message for testing
        self.sample_kafka_message = {
            "timestamp": "2025-09-22T07:23:59.072883",
            "source": "web2-hes-mock-generator",
            "request": {
                "method": "POST",
                "uri": "http://localhost:9080/hes-mock-generator",
                "remote_addr": "172.18.0.15",
                "user_agent": "",
                "content_type": "text/xml; charset=utf-8",
                "content_length": 4690,
                "body": self.sample_soap_xml,
                "headers": {
                    "Host": "localhost:9080",
                    "X-Real-Ip": "172.18.0.1",
                    "X-Forwarded-For": "172.18.0.1",
                    "X-Forwarded-Proto": "http",
                    "X-Forwarded-Host": "localhost",
                    "X-Forwarded-Port": "9080",
                    "Content-Length": "4690",
                    "Accept": "*/*",
                    "Content-Type": "text/xml; charset=utf-8",
                    "Soapaction": "GetEndDeviceEvents"
                }
            },
            "topic": "hes-kaifa-outage-topic",
            "processed_at": "2025-09-22T07:23:59.072893"
        }
    
    def tearDown(self):
        """Clean up test fixtures."""
        import shutil
        shutil.rmtree(self.temp_dir, ignore_errors=True)
    
    def test_consumer_initialization(self):
        """Test consumer initialization."""
        self.assertEqual(self.consumer.topic, 'test-topic')
        self.assertEqual(self.consumer.output_dir, self.temp_dir)
        self.assertEqual(self.consumer.group_id, 'test-group')
        self.assertTrue(os.path.exists(self.temp_dir))
    
    def test_extract_soap_body(self):
        """Test SOAP body extraction."""
        soap_body = self.consumer._extract_soap_body(self.sample_soap_xml)
        
        self.assertIsInstance(soap_body, dict)
        self.assertIn('ns1:EventMessage', soap_body)
    
    def test_extract_soap_body_invalid_xml(self):
        """Test SOAP body extraction with invalid XML."""
        invalid_xml = "invalid xml content"
        result = self.consumer._extract_soap_body(invalid_xml)
        
        self.assertEqual(result, invalid_xml)
    
    def test_transform_soap_to_json(self):
        """Test SOAP to JSON transformation."""
        soap_body = self.consumer._extract_soap_body(self.sample_soap_xml)
        transformed = self.consumer._transform_soap_to_json(soap_body)
        
        self.assertIsInstance(transformed, dict)
        self.assertIn('message_type', transformed)
        self.assertIn('header', transformed)
        self.assertIn('payload', transformed)
        self.assertIn('metadata', transformed)
        
        # Check header transformation
        header = transformed['header']
        self.assertEqual(header['verb'], 'Create')
        self.assertEqual(header['noun'], 'EndDeviceEvents')
        self.assertEqual(header['source'], 'OMS-Traffic-Simulator')
        
        # Check payload transformation
        payload = transformed['payload']
        self.assertEqual(payload['event_id'], 'msg_1758525839045_236')
        self.assertEqual(payload['reason'], 'Protection Trip')
        self.assertEqual(payload['severity'], 'Low')
    
    def test_extract_header(self):
        """Test header extraction."""
        header_data = {
            'ns1:Verb': 'Create',
            'ns1:Noun': 'EndDeviceEvents',
            'ns1:Source': 'OMS-Traffic-Simulator',
            'ns1:MessageID': 'test_message_id'
        }
        
        extracted = self.consumer._extract_header(header_data)
        
        self.assertEqual(extracted['verb'], 'Create')
        self.assertEqual(extracted['noun'], 'EndDeviceEvents')
        self.assertEqual(extracted['source'], 'OMS-Traffic-Simulator')
        self.assertEqual(extracted['message_id'], 'test_message_id')
    
    def test_extract_payload(self):
        """Test payload extraction."""
        payload_data = {
            'ns2:EndDeviceEvents': {
                'ns2:EndDeviceEvent': {
                    'ns2:mRID': 'test_event_id',
                    'ns2:reason': 'Test Reason',
                    'ns2:severity': 'High',
                    'ns2:status': {
                        'ns2:value': 'Active'
                    }
                }
            }
        }
        
        extracted = self.consumer._extract_payload(payload_data)
        
        self.assertEqual(extracted['event_id'], 'test_event_id')
        self.assertEqual(extracted['reason'], 'Test Reason')
        self.assertEqual(extracted['severity'], 'High')
        self.assertEqual(extracted['status']['ns2:value'], 'Active')
    
    def test_save_to_json_file(self):
        """Test JSON file saving."""
        test_data = {
            'test_key': 'test_value',
            'timestamp': datetime.now().isoformat()
        }
        
        message_id = 'test_message_123'
        filepath = self.consumer._save_to_json_file(test_data, message_id)
        
        self.assertTrue(os.path.exists(filepath))
        self.assertIn(message_id, filepath)
        
        # Verify file content
        with open(filepath, 'r', encoding='utf-8') as f:
            saved_data = json.load(f)
        
        self.assertEqual(saved_data['test_key'], 'test_value')
    
    def test_save_to_json_file_error_handling(self):
        """Test JSON file saving error handling."""
        # Test with invalid data that can't be JSON serialized
        invalid_data = {'datetime': datetime.now()}  # datetime objects aren't JSON serializable by default
        
        with self.assertRaises(Exception):
            self.consumer._save_to_json_file(invalid_data, 'test_id')
    
    def test_process_message_success(self):
        """Test successful message processing."""
        # Create a mock message object
        mock_message = Mock()
        mock_message.value = self.sample_kafka_message
        mock_message.partition = 0
        mock_message.offset = 123
        
        # Mock the file saving to avoid actual file creation
        with patch.object(self.consumer, '_save_to_json_file') as mock_save:
            mock_save.return_value = '/test/path/file.json'
            
            result = self.consumer._process_message(mock_message)
            
            self.assertTrue(result)
            mock_save.assert_called_once()
    
    def test_process_message_no_soap_body(self):
        """Test message processing with no SOAP body."""
        mock_message = Mock()
        mock_message.value = {
            'timestamp': '2025-09-22T07:23:59.072883',
            'source': 'test-source',
            'request': {
                'method': 'POST',
                'uri': 'http://localhost:9080/test'
                # No 'body' field
            }
        }
        mock_message.partition = 0
        mock_message.offset = 123
        
        result = self.consumer._process_message(mock_message)
        
        self.assertFalse(result)
    
    def test_process_message_processing_error(self):
        """Test message processing with processing error."""
        mock_message = Mock()
        mock_message.value = {
            'request': {
                'body': 'invalid soap xml'
            }
        }
        mock_message.partition = 0
        mock_message.offset = 123
        
        result = self.consumer._process_message(mock_message)
        
        # Should return False due to processing error
        self.assertFalse(result)
    
    @patch('hes_kaifa_consumer.KafkaConsumer')
    def test_create_consumer_success(self, mock_kafka_consumer):
        """Test successful consumer creation."""
        mock_consumer_instance = Mock()
        mock_kafka_consumer.return_value = mock_consumer_instance
        
        consumer = self.consumer._create_consumer()
        
        self.assertEqual(consumer, mock_consumer_instance)
        mock_kafka_consumer.assert_called_once()
    
    @patch('hes_kaifa_consumer.KafkaConsumer')
    def test_create_consumer_failure(self, mock_kafka_consumer):
        """Test consumer creation failure."""
        from kafka.errors import KafkaError
        mock_kafka_consumer.side_effect = KafkaError("Connection failed")
        
        with self.assertRaises(KafkaError):
            self.consumer._create_consumer()
    
    def test_signal_handler(self):
        """Test signal handler functionality."""
        # Test that signal handler sets running to False
        self.assertTrue(self.consumer.running)
        
        self.consumer._signal_handler(signal.SIGINT, None)
        
        self.assertFalse(self.consumer.running)
    
    def test_cleanup(self):
        """Test cleanup functionality."""
        # Mock consumer
        mock_consumer = Mock()
        self.consumer.consumer = mock_consumer
        
        self.consumer._cleanup()
        
        mock_consumer.close.assert_called_once()


class TestSOAPTransformation(unittest.TestCase):
    """Test cases specifically for SOAP transformation logic."""
    
    def setUp(self):
        """Set up test fixtures."""
        self.temp_dir = tempfile.mkdtemp()
        self.consumer = HESKaifaConsumer(output_dir=self.temp_dir)
    
    def tearDown(self):
        """Clean up test fixtures."""
        import shutil
        shutil.rmtree(self.temp_dir, ignore_errors=True)
    
    def test_complex_soap_structure(self):
        """Test transformation of complex SOAP structure."""
        complex_soap = '''<?xml version="1.0" encoding="UTF-8"?>
<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">
    <soap:Body>
        <ns1:EventMessage xmlns:ns1="http://iec.ch/TC57/2011/schema/message">
            <ns1:Header>
                <ns1:Verb>Create</ns1:Verb>
                <ns1:Noun>EndDeviceEvents</ns1:Noun>
            </ns1:Header>
            <ns1:Payload>
                <ns2:EndDeviceEvents xmlns:ns2="http://iec.ch/TC57/2011/EndDeviceEvents#">
                    <ns2:EndDeviceEvent>
                        <ns2:mRID>complex_event_123</ns2:mRID>
                        <ns2:reason>Complex Test</ns2:reason>
                    </ns2:EndDeviceEvent>
                </ns2:EndDeviceEvents>
            </ns1:Payload>
        </ns1:EventMessage>
    </soap:Body>
</soap:Envelope>'''
        
        soap_body = self.consumer._extract_soap_body(complex_soap)
        transformed = self.consumer._transform_soap_to_json(soap_body)
        
        self.assertIsInstance(transformed, dict)
        self.assertEqual(transformed['payload']['event_id'], 'complex_event_123')
        self.assertEqual(transformed['payload']['reason'], 'Complex Test')
    
    def test_malformed_soap_handling(self):
        """Test handling of malformed SOAP."""
        malformed_soap = '''<?xml version="1.0" encoding="UTF-8"?>
<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">
    <soap:Body>
        <ns1:EventMessage xmlns:ns1="http://iec.ch/TC57/2011/schema/message">
            <!-- Missing closing tag -->
        </ns1:EventMessage>
    </soap:Body>
</soap:Envelope>'''
        
        # Should handle malformed XML gracefully
        soap_body = self.consumer._extract_soap_body(malformed_soap)
        self.assertIsInstance(soap_body, (dict, str))


if __name__ == '__main__':
    unittest.main()
