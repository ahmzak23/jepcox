#!/usr/bin/env python3
"""
Test producer to send sample messages to hes-kaifa-outage-topic
This helps test the consumer functionality.
"""

import json
import time
from kafka import KafkaProducer
from datetime import datetime

def create_sample_message():
    """Create a sample message for testing."""
    sample_soap = '''<?xml version="1.0" encoding="UTF-8"?>
<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/" 
               xmlns:ns1="http://iec.ch/TC57/2011/schema/message"
               xmlns:ns2="http://iec.ch/TC57/2011/EndDeviceEvents#">
    <soap:Header/>
    <soap:Body>
        <ns1:EventMessage>
            <ns1:Header>
                <ns1:Verb>Create</ns1:Verb>
                <ns1:Noun>EndDeviceEvents</ns1:Noun>
                <ns1:Revision>1.0</ns1:Revision>
                <ns1:Timestamp>2025-09-22T07:23:59.045Z</ns1:Timestamp>
                <ns1:Source>OMS-Traffic-Simulator</ns1:Source>
                <ns1:AsyncReplyFlag>false</ns1:AsyncReplyFlag>
                <ns1:AckRequired>false</ns1:AckRequired>
                <ns1:User>
                    <ns1:UserID>simulator_user</ns1:UserID>
                    <ns1:Organization>Amman-OMS</ns1:Organization>
                </ns1:User>
                <ns1:MessageID>msg_1758525839045_235</ns1:MessageID>
                <ns1:CorrelationID>corr_1758525839045_118</ns1:CorrelationID>
                <ns1:Comment>Generated by OMS Traffic Simulator for Ain Ghazal</ns1:Comment>
            </ns1:Header>
            <ns1:Payload>
                <ns2:EndDeviceEvents>
                    <ns2:EndDeviceEvent>
                        <ns2:mRID>msg_1758525839045_236</ns2:mRID>
                        <ns2:createdDateTime>2025-09-22T07:23:59.045Z</ns2:createdDateTime>
                        <ns2:issuerID>OMS-Simulator</ns2:issuerID>
                        <ns2:issuerTrackingID>msg_1758525839045_235</ns2:issuerTrackingID>
                        <ns2:reason>Protection Trip</ns2:reason>
                        <ns2:severity>Low</ns2:severity>
                        <ns2:userID>simulator_user</ns2:userID>
                        <ns2:Assets>
                            <ns2:mRID>asset_1758525839045</ns2:mRID>
                            <ns2:Names>
                                <ns2:name>Power Asset</ns2:name>
                                <ns2:NameType>
                                    <ns2:name>Asset Name</ns2:name>
                                    <ns2:description>Power system asset identifier</ns2:description>
                                </ns2:NameType>
                            </ns2:Names>
                        </ns2:Assets>
                        <ns2:EndDeviceEventDetails>
                            <ns2:name>Current</ns2:name>
                            <ns2:value>101.65A</ns2:value>
                        </ns2:EndDeviceEventDetails>
                        <ns2:EndDeviceEventDetails>
                            <ns2:name>Frequency</ns2:name>
                            <ns2:value>49.97Hz</ns2:value>
                        </ns2:EndDeviceEventDetails>
                        <ns2:EndDeviceEventDetails>
                            <ns2:name>Power</ns2:name>
                            <ns2:value>1227.18kW</ns2:value>
                        </ns2:EndDeviceEventDetails>
                        <ns2:EndDeviceEventType ref="PowerOutage"/>
                        <ns2:Names>
                            <ns2:name>Power Event</ns2:name>
                            <ns2:NameType>
                                <ns2:name>Event Name</ns2:name>
                                <ns2:description>Power system event identifier</ns2:description>
                            </ns2:NameType>
                        </ns2:Names>
                        <ns2:status>
                            <ns2:dateTime>2025-09-22T07:23:59.045Z</ns2:dateTime>
                            <ns2:reason>Protection Trip</ns2:reason>
                            <ns2:remark>Simulated event for testing purposes</ns2:remark>
                            <ns2:value>Active</ns2:value>
                        </ns2:status>
                        <ns2:UsagePoint>
                            <ns2:mRID>up_1758525839045</ns2:mRID>
                            <ns2:Names>
                                <ns2:name>Ain Ghazal</ns2:name>
                                <ns2:NameType>
                                    <ns2:name>Usage Point Name</ns2:name>
                                    <ns2:description>Power consumption point identifier</ns2:description>
                                </ns2:NameType>
                            </ns2:Names>
                        </ns2:UsagePoint>
                    </ns2:EndDeviceEvent>
                </ns2:EndDeviceEvents>
            </ns1:Payload>
        </ns1:EventMessage>
    </soap:Body>
</soap:Envelope>'''
    
    return {
        "timestamp": datetime.now().isoformat(),
        "source": "test-producer",
        "request": {
            "method": "POST",
            "uri": "http://localhost:9080/hes-mock-generator",
            "remote_addr": "172.18.0.15",
            "user_agent": "",
            "content_type": "text/xml; charset=utf-8",
            "content_length": len(sample_soap),
            "body": sample_soap,
            "headers": {
                "Host": "localhost:9080",
                "X-Real-Ip": "172.18.0.1",
                "X-Forwarded-For": "172.18.0.1",
                "X-Forwarded-Proto": "http",
                "X-Forwarded-Host": "localhost",
                "X-Forwarded-Port": "9080",
                "Content-Length": str(len(sample_soap)),
                "Accept": "*/*",
                "Content-Type": "text/xml; charset=utf-8",
                "Soapaction": "GetEndDeviceEvents"
            }
        },
        "topic": "hes-kaifa-outage-topic",
        "processed_at": datetime.now().isoformat()
    }

def send_test_messages(bootstrap_servers='localhost:9092', topic='hes-kaifa-outage-topic', count=5):
    """Send test messages to Kafka topic."""
    try:
        # Create producer
        producer = KafkaProducer(
            bootstrap_servers=bootstrap_servers,
            value_serializer=lambda x: json.dumps(x).encode('utf-8')
        )
        
        print(f"Sending {count} test messages to topic: {topic}")
        
        for i in range(count):
            message = create_sample_message()
            message['request']['headers']['X-Message-ID'] = f"test_msg_{i+1}_{int(time.time() * 1000)}"
            
            # Send message
            future = producer.send(topic, value=message)
            result = future.get(timeout=10)
            
            print(f"✓ Message {i+1} sent successfully to partition {result.partition}, offset {result.offset}")
            time.sleep(1)  # Wait 1 second between messages
        
        producer.close()
        print(f"✓ Successfully sent {count} test messages!")
        
    except Exception as e:
        print(f"✗ Error sending messages: {e}")
        print("Make sure Kafka is running: docker-compose up -d zookeeper kafka")

def main():
    """Main function."""
    print("HES-Kaifa Test Producer")
    print("=" * 30)
    
    # Check if Kafka is running
    try:
        producer = KafkaProducer(bootstrap_servers='localhost:9092')
        producer.close()
        print("✓ Kafka connection successful")
    except Exception as e:
        print(f"✗ Cannot connect to Kafka: {e}")
        print("Please start Kafka first:")
        print("  docker-compose up -d zookeeper kafka")
        return
    
    # Send test messages
    send_test_messages()

if __name__ == "__main__":
    main()
