#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

version: "3"

services:
  apisix-dashboard:
    image: apache/apisix-dashboard:2.10.1-alpine
    restart: always
    volumes:
    - ./dashboard_conf/conf.yaml:/usr/local/apisix-dashboard/conf/conf.yaml
    ports:
    - "9000:9000"
    networks:
      apisix:

  apisix:
    image: apache/apisix:2.13.1-alpine
    restart: always
    volumes:
      - ./apisix_log:/usr/local/apisix/logs
      - ./apisix_conf/config.yaml:/usr/local/apisix/conf/config.yaml:ro
    depends_on:
      - etcd
    ##network_mode: host
    ports:
      - "9080:9080/tcp"
      - "9091:9091/tcp"
      - "9443:9443/tcp"
      - "9092:9092/tcp"
      - "9180:9180/tcp"
    networks:
      apisix:

  etcd:
    image: bitnami/etcd:3.4.15
    restart: always
    volumes:
      - etcd_data:/bitnami/etcd
    environment:
      ETCD_ENABLE_V2: "true"
      ALLOW_NONE_AUTHENTICATION: "yes"
      ETCD_ADVERTISE_CLIENT_URLS: "http://0.0.0.0:2379"
      ETCD_LISTEN_CLIENT_URLS: "http://0.0.0.0:2379"
    ports:
      - "12379:2379/tcp"
    networks:
      apisix:

  web1:
    image: nginx:1.19.0-alpine
    restart: always
    volumes:
      - ./upstream/web1.conf:/etc/nginx/nginx.conf
    ports:
      - "9081:80/tcp"
    environment:
      - NGINX_PORT=80
    networks:
      apisix:

  kaifa_hes_upstram:
    image: python:3.9-alpine
    restart: always
    volumes:
      - ./services/kaifa/producer/web2_kafka_service.py:/app/web2_kafka_service.py
    ports:
      - "9085:80/tcp"
    working_dir: /app
    command: >
      sh -c "
        pip install flask kafka-python &&
        python web2_kafka_service.py
      "
    networks:
      apisix:
    depends_on:
      - kafka

  scada_upstram:
    image: python:3.9-alpine
    restart: always
    volumes:
      - ./services/scada/producer/scada_kafka_service.py:/app/scada_kafka_service.py
    ports:
      - "9086:80/tcp"
    working_dir: /app
    command: >
      sh -c "
        pip install flask kafka-python &&
        python scada_kafka_service.py
      "
    networks:
      apisix:
    depends_on:
      - kafka


  call_center_upstream:
    image: python:3.9-alpine
    restart: always
    volumes:
      - ./services/call_center/producer/call_center_kafka_service.py:/app/call_center_kafka_service.py
    ports:
      - "9087:80/tcp"
    working_dir: /app
    command: >
      sh -c "
        pip install flask kafka-python &&
        python call_center_kafka_service.py
      "
    networks:
      apisix:
    depends_on:
      - kafka

  onu_upstream:
    image: python:3.9-alpine
    restart: always
    volumes:
      - ./services/onu/producer/onu_kafka_service.py:/app/onu_kafka_service.py
      - ./services/onu/logs:/workspace/onu/logs
    ports:
      - "9088:80/tcp"
    working_dir: /app
    command: >
      sh -c "
        pip install flask kafka-python &&
        python onu_kafka_service.py
      "
    networks:
      apisix:
    depends_on:
      - kafka


  # Kafka Infrastructure for OMS System
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    hostname: zookeeper
    container_name: apisix-workshop-zookeeper
    restart: always
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_SERVERS: zookeeper:2888:3888
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_logs:/var/lib/zookeeper/log
    ports:
      - "2181:2181"
    networks:
      apisix:

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    hostname: kafka
    container_name: apisix-workshop-kafka
    restart: always
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:9093
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_NUM_PARTITIONS: 3
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
      KAFKA_LOG_RETENTION_HOURS: 168
      KAFKA_LOG_SEGMENT_BYTES: 1073741824
      KAFKA_LOG_RETENTION_CHECK_INTERVAL_MS: 300000
    volumes:
      - kafka_data:/var/lib/kafka/data
    ports:
      - "9093:9092"
      - "29092:29092"
    networks:
      apisix:



  # Kafka UI for management and monitoring
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    hostname: kafka-ui
    container_name: apisix-workshop-kafka-ui
    restart: always
    depends_on:
      - kafka
    environment:
      KAFKA_CLUSTERS_0_NAME: oms-cluster
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
      DYNAMIC_CONFIG_ENABLED: 'true'
      KAFKA_CLUSTERS_0_TOPIC_PAGE_SIZE: '25'
      KAFKA_CLUSTERS_0_TOPIC_PAGE_SIZE_MAX: '100'
      KAFKA_CLUSTERS_0_TOPIC_PAGE_SIZE_DEFAULT: '25'
    ports:
      - "8080:8080"
    networks:
      apisix:

  # --- Under Construction: OMS Ingestion API (FastAPI) ---
  oms-api:
    build:
      context: ./construction/oms_ingestion_service
      dockerfile: Dockerfile
    container_name: apisix-workshop-oms-api
    restart: always
    environment:
      DATABASE_URL: ${DATABASE_URL}
    volumes:
      - ./construction/oms_ingestion_service:/app
      - ./construction/oms_correlated_schema.sql:/bootstrap/oms_correlated_schema.sql:ro
    ports:
      - "9100:8000"
    networks:
      apisix:

  # --- Under Construction: OMS Migrator (batch/backfill) ---
  oms-migrator:
    build:
      context: ./construction/oms_migrator
      dockerfile: Dockerfile
    container_name: apisix-workshop-oms-migrator
    restart: "no"
    environment:
      DATABASE_URL: ${DATABASE_URL}
      RUN_MODE: one_shot
    volumes:
      - ./construction/oms_data_migration.sql:/work/oms_data_migration.sql:ro
    networks:
      apisix:

  # --- Under Construction: OMS Dashboard (Web UI) ---
  oms-dashboard:
    build:
      context: ./construction/oms_dashboard
      dockerfile: Dockerfile
    container_name: apisix-workshop-oms-dashboard
    restart: always
    ports:
      - "9200:80"
    depends_on:
      - oms-api
    networks:
      apisix:

  # --- Under Construction: OMS Analytics Dashboard (Advanced Reporting) ---
  oms-analytics:
    build:
      context: ./construction/oms_analytics_dashboard
      dockerfile: Dockerfile
    container_name: apisix-workshop-oms-analytics
    restart: always
    ports:
      - "9300:80"
    depends_on:
      - oms-api
    networks:
      apisix:

  # PostgreSQL Database for OMS System
  oms-database:
    image: postgres:13
    container_name: apisix-workshop-oms-database
    restart: always
    environment:
      POSTGRES_DB: ${DB_NAME:-oms_db}
      POSTGRES_USER: ${DB_USER:-web}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-123456}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - oms_database_data:/var/lib/postgresql/data
      - ./services/kaifa/db/kaifa_database_schema.sql:/docker-entrypoint-initdb.d/01-kaifa-schema.sql:ro
      - ./services/scada/db/scada_database_schema.sql:/docker-entrypoint-initdb.d/02-scada-schema.sql:ro
      - ./services/call_center/db/call_center_database_schema.sql:/docker-entrypoint-initdb.d/03-call-center-schema.sql:ro
      - ./services/onu/db/onu_database_schema.sql:/docker-entrypoint-initdb.d/04-onu-schema.sql:ro
    ports:
      - "${DB_PORT:-5433}:5432"
    networks:
      apisix:

  # HES-Kaifa Consumer Service
  hes-consumer:
    image: python:3.9-slim
    hostname: hes-consumer
    container_name: apisix-workshop-hes-consumer
    restart: always
    environment:
      - OMS_API_URL=http://oms-api:8000
      - DB_HOST=${DB_HOST:-oms-database}
      - DB_PORT=${DB_PORT:-5432}
      - DB_NAME=${DB_NAME:-oms_db}
      - DB_USER=${DB_USER:-web}
      - DB_PASSWORD=${DB_PASSWORD:-123456}
      - DB_SSL_MODE=${DB_SSL_MODE:-prefer}
    volumes:
      - ./services/kaifa/consumer:/workspace/hes-consumer
      - ./services/kaifa/db:/workspace/hes-db
      - ./requirements.txt:/workspace/requirements.txt
      - ./services/kaifa/outbox:/workspace/hes-outbox
    working_dir: /workspace/hes-consumer
    command: >
      sh -c "
        pip install --no-cache-dir -r /workspace/requirements.txt &&
        python run_consumer.py --bootstrap-servers kafka:9092 --topic hes-kaifa-outage-topic --group-id hes-kaifa-consumer-group --output-dir /workspace/hes-outbox --enable-database
      "
    depends_on:
      - kafka
      - oms-api
      - oms-database
    networks:
      apisix:

  # SCADA Consumer Service
  scada-consumer:
    image: python:3.9-slim
    hostname: scada-consumer
    container_name: apisix-workshop-scada-consumer
    restart: always
    environment:
      - OMS_API_URL=http://oms-api:8000
      - DB_HOST=${DB_HOST:-oms-database}
      - DB_PORT=${DB_PORT:-5432}
      - DB_NAME=${DB_NAME:-oms_db}
      - DB_USER=${DB_USER:-web}
      - DB_PASSWORD=${DB_PASSWORD:-123456}
      - DB_SSL_MODE=${DB_SSL_MODE:-prefer}
    volumes:
      - ./services/scada/consumer:/workspace/scada-consumer
      - ./requirements.txt:/workspace/requirements.txt
      - ./services/scada/outbox:/workspace/scada-outbox
    working_dir: /workspace/scada-consumer
    command: >
      sh -c "
        pip install --no-cache-dir -r /workspace/requirements.txt &&
        python scada_consumer.py --bootstrap-servers kafka:9092 --topic scada-outage-topic --group-id scada-consumer-group --output-dir /workspace/scada-outbox
      "
    depends_on:
      - kafka
      - oms-api
      - oms-database
    networks:
      apisix:

  # Call Center Consumer Service
  call-center-consumer:
    image: python:3.9-slim
    hostname: call-center-consumer
    container_name: apisix-workshop-call-center-consumer
    restart: always
    environment:
      - OMS_API_URL=http://oms-api:8000
      - DB_HOST=${DB_HOST:-oms-database}
      - DB_PORT=${DB_PORT:-5432}
      - DB_NAME=${DB_NAME:-oms_db}
      - DB_USER=${DB_USER:-web}
      - DB_PASSWORD=${DB_PASSWORD:-123456}
      - DB_SSL_MODE=${DB_SSL_MODE:-prefer}
    volumes:
      - ./services/call_center/consumer:/workspace/call-center-consumer
      - ./requirements.txt:/workspace/requirements.txt
      - ./services/call_center/outbox:/workspace/call-center-outbox
    working_dir: /workspace/call-center-consumer
    command: >
      sh -c "
        pip install --no-cache-dir -r /workspace/requirements.txt &&
        python call_center_consumer.py --bootstrap-servers kafka:9092 --topic call_center_upstream_topic --group-id call-center-consumer-group --output-dir /workspace/call-center-outbox
      "
    depends_on:
      - kafka
      - oms-api
      - oms-database
    networks:
      apisix:

  # ONU Consumer Service
  onu-consumer:
    image: python:3.9-slim
    hostname: onu-consumer
    container_name: apisix-workshop-onu-consumer
    restart: always
    environment:
      - OMS_API_URL=http://oms-api:8000
      - DB_HOST=${DB_HOST:-oms-database}
      - DB_PORT=${DB_PORT:-5432}
      - DB_NAME=${DB_NAME:-oms_db}
      - DB_USER=${DB_USER:-web}
      - DB_PASSWORD=${DB_PASSWORD:-123456}
      - DB_SSL_MODE=${DB_SSL_MODE:-prefer}
    volumes:
      - ./services/onu/consumer:/workspace/onu-consumer
      - ./services/onu/db:/workspace/onu-db
      - ./requirements.txt:/workspace/requirements.txt
      - ./services/onu/outbox:/workspace/onu-outbox
    working_dir: /workspace/onu-consumer
    command: >
      sh -c "
        pip install --no-cache-dir -r /workspace/requirements.txt &&
        python onu_consumer.py --bootstrap-servers kafka:9092 --topic onu-events-topic --group-id onu-consumer-group --output-dir /workspace/onu-outbox
      "
    depends_on:
      - kafka
      - oms-api
      - oms-database
    networks:
      apisix:

  # Kong API Gateway Services
  kong-database:
    image: postgres:13
    container_name: apisix-workshop-kong-database
    restart: always
    environment:
      POSTGRES_DB: kong
      POSTGRES_USER: kong
      POSTGRES_PASSWORD: kongpassword
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - kong_database_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      apisix:

  kong-migrations:
    image: kong:latest
    container_name: apisix-workshop-kong-migrations
    restart: "no"
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kongpassword
      KONG_PG_DATABASE: kong
    depends_on:
      - kong-database
    networks:
      apisix:
    command: kong migrations bootstrap

  kong:
    image: kong:latest
    container_name: apisix-workshop-kong
    restart: always
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kongpassword
      KONG_PG_DATABASE: kong
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
      KONG_PROXY_LISTEN: 0.0.0.0:8000
      KONG_ADMIN_GUI_LISTEN: 0.0.0.0:8002
    volumes:
      - ./kong_conf/kong.yml:/kong_conf/kong.yml:ro
    depends_on:
      - kong-database
      - kong-migrations
    ports:
      - "8000:8000"  # Kong Proxy
      - "8001:8001"  # Kong Admin API
      - "8002:8002"  # Kong Manager
    networks:
      apisix:

  konga:
    image: pantsel/konga:latest
    container_name: apisix-workshop-konga
    restart: always
    environment:
      NODE_ENV: production
      KONGA_HOOK_TIMEOUT: 120000
      KONGA_BACKEND: postgres
      DB_ADAPTER: postgres
      DB_HOST: konga-database
      DB_PORT: 5432
      DB_USER: konga
      DB_PASSWORD: kongapassword
      DB_DATABASE: konga
    ports:
      - "1337:1337"
    depends_on:
      - kong
      - konga-database
    networks:
      apisix:

  # Konga Database for storing admin configurations
  konga-database:
    image: postgres:13
    container_name: apisix-workshop-konga-database
    restart: always
    environment:
      POSTGRES_DB: konga
      POSTGRES_USER: konga
      POSTGRES_PASSWORD: kongapassword
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - konga_database_data:/var/lib/postgresql/data
    networks:
      apisix:

networks:
  apisix:
    driver: bridge

volumes:
  etcd_data:
  web2_logs:
    driver: local
  zookeeper_data:
    driver: local
  zookeeper_logs:
    driver: local
  kafka_data:
    driver: local
  kong_database_data:
    driver: local
  konga_database_data:
    driver: local
  oms_database_data:
    driver: local