{
  "routes": [
    {
      "id": "oms-health-check",
      "uri": "/oms/health",
      "methods": ["GET"],
      "plugins": {
        "serverless-pre-function": {
          "phase": "access",
          "functions": [
            "return function(conf, ctx) ngx.log(ngx.INFO, 'OMS Health Check Request') end"
          ]
        },
        "serverless-post-function": {
          "phase": "log",
          "functions": [
            "return function(conf, ctx) local health_data = { status = 'healthy', timestamp = ngx.time(), service = 'oms' } ngx.say(cjson.encode(health_data)) end"
          ]
        }
      },
      "upstream": {
        "type": "roundrobin",
        "nodes": {
          "httpbin.org": 1
        }
      }
    },
    {
      "id": "oms-metrics",
      "uri": "/oms/metrics",
      "methods": ["GET"],
      "plugins": {
        "serverless-pre-function": {
          "phase": "access",
          "functions": [
            "return function(conf, ctx) ngx.req.set_header('X-Metrics-Request', 'true') ngx.log(ngx.INFO, 'OMS Metrics Request from: ' .. ngx.var.remote_addr) end"
          ]
        },
        "serverless-post-function": {
          "phase": "log",
          "functions": [
            "return function(conf, ctx) local metrics = { active_outages = math.random(0, 10), resolved_outages = math.random(50, 100), timestamp = ngx.time() } ngx.say(cjson.encode(metrics)) end"
          ]
        }
      },
      "upstream": {
        "type": "roundrobin",
        "nodes": {
          "httpbin.org": 1
        }
      }
    },
    {
      "id": "oms-outages",
      "uri": "/oms/outages",
      "methods": ["GET", "POST"],
      "plugins": {
        "serverless-pre-function": {
          "phase": "access",
          "functions": [
            "return function(conf, ctx) local method = ngx.var.request_method if method == 'POST' then local body = ngx.req.get_body_data() if body then local data = cjson.decode(body) ngx.ctx.outage_data = data ngx.log(ngx.INFO, 'New outage reported: ' .. (data.description or 'Unknown')) end end end"
          ]
        },
        "serverless-post-function": {
          "phase": "log",
          "functions": [
            "return function(conf, ctx) local response = { success = true, message = 'Outage processed', timestamp = ngx.time() } if ngx.ctx.outage_data then response.outage_id = 'OUT-' .. ngx.time() end ngx.say(cjson.encode(response)) end"
          ]
        }
      },
      "upstream": {
        "type": "roundrobin",
        "nodes": {
          "httpbin.org": 1
        }
      }
    },
    {
      "id": "oms-dashboard",
      "uri": "/oms/dashboard/*",
      "methods": ["GET"],
      "plugins": {
        "serverless-pre-function": {
          "phase": "access",
          "functions": [
            "return function(conf, ctx) ngx.req.set_header('X-Dashboard-Request', 'true') local dashboard_type = string.match(ngx.var.request_uri, '/oms/dashboard/([^/]+)') ngx.ctx.dashboard_type = dashboard_type ngx.log(ngx.INFO, 'Dashboard request for: ' .. (dashboard_type or 'default')) end"
          ]
        },
        "serverless-post-function": {
          "phase": "log",
          "functions": [
            "return function(conf, ctx) local dashboard_data = { type = ngx.ctx.dashboard_type or 'default', data = { outages = math.random(0, 5), alerts = math.random(0, 3), timestamp = ngx.time() }, response_time = ngx.var.request_time } ngx.say(cjson.encode(dashboard_data)) end"
          ]
        }
      },
      "upstream": {
        "type": "roundrobin",
        "nodes": {
          "httpbin.org": 1
        }
      }
    },
    {
      "id": "oms-api-proxy",
      "uri": "/oms/api/*",
      "methods": ["GET", "POST", "PUT", "DELETE"],
      "plugins": {
        "serverless-pre-function": {
          "phase": "access",
          "functions": [
            "return function(conf, ctx) local api_path = string.match(ngx.var.request_uri, '/oms/api/(.+)') ngx.ctx.api_path = api_path ngx.req.set_header('X-API-Version', 'v1') ngx.req.set_header('X-Request-ID', ngx.var.request_id) ngx.log(ngx.INFO, 'API Request: ' .. ngx.var.request_method .. ' /' .. (api_path or '')) end"
          ]
        },
        "serverless-post-function": {
          "phase": "log",
          "functions": [
            "return function(conf, ctx) local api_response = { api_path = ngx.ctx.api_path, method = ngx.var.request_method, status = ngx.status, timestamp = ngx.time(), request_id = ngx.var.request_id } ngx.say(cjson.encode(api_response)) end"
          ]
        }
      },
      "upstream": {
        "type": "roundrobin",
        "nodes": {
          "httpbin.org": 1
        }
      }
    }
  ]
}
