#!/bin/bash

################################################################################
# Environment Setup Script
# This script helps you set up the correct environment configuration
################################################################################

# Colors
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
WHITE='\033[1;37m'
RED='\033[0;31m'
NC='\033[0m'

echo -e "${GREEN}🔧 OMS Environment Setup${NC}"
echo -e "${GREEN}========================${NC}"
echo ""

# Function to show current configuration
show_current_config() {
    if [ -f "oms.env" ]; then
        echo -e "${CYAN}📋 Current Configuration (oms.env):${NC}"
        echo -e "${WHITE}• DB_HOST: $(grep '^DB_HOST=' oms.env | cut -d'=' -f2)${NC}"
        echo -e "${WHITE}• DB_PORT: $(grep '^DB_PORT=' oms.env | cut -d'=' -f2)${NC}"
        echo -e "${WHITE}• DB_NAME: $(grep '^DB_NAME=' oms.env | cut -d'=' -f2)${NC}"
        echo -e "${WHITE}• DB_USER: $(grep '^DB_USER=' oms.env | cut -d'=' -f2)${NC}"
        echo -e "${WHITE}• Environment: $(grep '^ENVIRONMENT=' oms.env | cut -d'=' -f2)${NC}"
    else
        echo -e "${YELLOW}⚠️  No oms.env file found${NC}"
    fi
    echo ""
}

# Function to set up local environment
setup_local() {
    echo -e "${CYAN}🏠 Setting up LOCAL development environment...${NC}"
    cp oms.env.local oms.env
    echo -e "${GREEN}✅ Local environment configured${NC}"
    echo ""
    echo -e "${CYAN}📋 Local Configuration:${NC}"
    echo -e "${WHITE}• Database: Docker container (oms-database)${NC}"
    echo -e "${WHITE}• Port: 5433 (external)${NC}"
    echo -e "${WHITE}• Credentials: web/123456${NC}"
    echo ""
}

# Function to set up server environment
setup_server() {
    echo -e "${CYAN}🖥️  Setting up SERVER environment...${NC}"
    cp oms.env.server oms.env
    echo -e "${GREEN}✅ Server environment template configured${NC}"
    echo ""
    echo -e "${YELLOW}⚠️  IMPORTANT: You need to update the database settings in oms.env${NC}"
    echo ""
    echo -e "${CYAN}📝 Please edit oms.env and update:${NC}"
    echo -e "${WHITE}• DB_HOST=your_actual_database_server${NC}"
    echo -e "${WHITE}• DB_PASSWORD=your_secure_password${NC}"
    echo -e "${WHITE}• DB_NAME=your_database_name (if different)${NC}"
    echo -e "${WHITE}• DB_USER=your_database_user (if different)${NC}"
    echo ""
    echo -e "${CYAN}📝 Example for server with PostgreSQL on localhost:${NC}"
    echo -e "${WHITE}DB_HOST=localhost${NC}"
    echo -e "${WHITE}DB_PORT=5432${NC}"
    echo -e "${WHITE}DB_NAME=oms_production${NC}"
    echo -e "${WHITE}DB_USER=postgres${NC}"
    echo -e "${WHITE}DB_PASSWORD=your_secure_password${NC}"
    echo ""
}

# Function to customize environment
customize_env() {
    echo -e "${CYAN}⚙️  Customizing environment...${NC}"
    echo ""
    
    read -p "Enter DB_HOST (default: oms-database): " db_host
    db_host=${db_host:-oms-database}
    
    read -p "Enter DB_PORT (default: 5432): " db_port
    db_port=${db_port:-5432}
    
    read -p "Enter DB_NAME (default: oms_db): " db_name
    db_name=${db_name:-oms_db}
    
    read -p "Enter DB_USER (default: web): " db_user
    db_user=${db_user:-web}
    
    read -s -p "Enter DB_PASSWORD (default: 123456): " db_password
    db_password=${db_password:-123456}
    echo ""
    
    read -p "Enter Environment (development/production): " environment
    environment=${environment:-development}
    
    # Create custom oms.env
    cat > oms.env << EOF
# OMS Database Configuration - CUSTOM
# Generated by setup-environment.sh

# Database Connection Settings
DB_HOST=$db_host
DB_PORT=$db_port
DB_NAME=$db_name
DB_USER=$db_user
DB_PASSWORD=$db_password
DB_SSL_MODE=prefer

# OMS API Configuration
DATABASE_URL=postgresql://$db_user:$db_password@$db_host:$db_port/$db_name

# Kafka Configuration
KAFKA_BOOTSTRAP_SERVERS=kafka:9092

# Environment
ENVIRONMENT=$environment
EOF
    
    echo -e "${GREEN}✅ Custom environment configured${NC}"
    echo ""
}

# Main menu
echo -e "${CYAN}Available options:${NC}"
echo -e "${WHITE}1) Show current configuration${NC}"
echo -e "${WHITE}2) Setup LOCAL development environment${NC}"
echo -e "${WHITE}3) Setup SERVER environment (template)${NC}"
echo -e "${WHITE}4) Customize environment${NC}"
echo -e "${WHITE}5) Exit${NC}"
echo ""

read -p "Choose an option (1-5): " choice

case $choice in
    1)
        show_current_config
        ;;
    2)
        setup_local
        show_current_config
        ;;
    3)
        setup_server
        show_current_config
        ;;
    4)
        customize_env
        show_current_config
        ;;
    5)
        echo -e "${GREEN}👋 Goodbye!${NC}"
        exit 0
        ;;
    *)
        echo -e "${RED}❌ Invalid option${NC}"
        exit 1
        ;;
esac

echo -e "${CYAN}📋 Next Steps:${NC}"
echo -e "${WHITE}• Review the configuration above${NC}"
echo -e "${WHITE}• If using server environment, update the database settings${NC}"
echo -e "${WHITE}• Start the system: ./start-with-database.sh${NC}"
echo -e "${WHITE}• Or restart services: docker compose restart${NC}"
echo ""
